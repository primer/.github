name: Release

on:
  workflow_call:
    inputs:
      install:
        type: string
        required: false
        default: npm ci
      tag:
        type: string
        required: false
        default: next
      node_version:
        type: number
        required: false
        default: 16
      use_gpr:
        type: boolean
        required: false
        default: false
    secrets:
      gh_token: 
        required: true
      npm_token:
        required: true

jobs:
  release-candidate:
    name: Candidate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v5
        with:
          node_version: ${{ inputs.node_version }}

      - name: Install dependencies
        run: ${{ inputs.install }}

      - name: Build
        run: npm run build --if-present

      - name: Create .npmrc
        run: |
          if [ "$use_gpr" = "true" ]; then
            registry="//npm.pkg.github.com/"
          else
            registry="//registry.npmjs.org/"
          fi
          cat << EOF > "$HOME/.npmrc"
            $registry:_authToken=$NPM_TOKEN
          EOF
        env:
          use_gpr: ${{ inputs.use_gpr }}
          NPM_TOKEN: ${{ secrets.npm_token }}

      - name: Publish release candidate
        run: |
          version=$(jq -r .version package.json)
          echo "$( jq ".version = \"$(echo $version)-rc.$(git rev-parse --short HEAD)\"" package.json )" > package.json
          yarn changeset publish --tag ${{ inputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Output candidate version
        uses: actions/github-script@v8
        with:
          script: |
            const package = require(`${process.env.GITHUB_WORKSPACE}/package.json`)
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: `Published ${package.name}`,
              description: package.version,
              target_url: `https://unpkg.com/${package.name}@${package.version}/`
            })
      - uses: ./.github/actions/upload-versions
